version: '3.9'

# Microservices mode (Metrics)
services:
  minio:
    image: minio/minio:RELEASE.2023-11-01T01-57-10Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/mimir-data /data/mimir-rules /data/mimir-alertmanager && \
        mkdir -p /data/loki-data /data/loki-rules && \
        mkdir -p /data/tempo-data  && \
        mkdir -p /data/pyroscope-data && \
        minio server /data --console-address ':9001'
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin_password
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
      # # Using /minio/v2/metrics is not supported yet with console. https://github.com/minio/console/issues/629#issuecomment-792055977
      # - MINIO_PROMETHEUS_URL="http://gateway:8080/prometheus"
      # - MINIO_PROMETHEUS_JOB_ID="integrations/minio"
    volumes:
      - data-minio:/data:delegated
    healthcheck:
      test: ["CMD", "curl","-f","http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9001:9001"
  agent:
    depends_on:
      gateway:
        condition: service_healthy
    image: grafana/agent:v0.37.2
    volumes:
      - ../config/agent-flow:/etc/agent-config
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint:
      - /bin/grafana-agent
      - run
      - /etc/agent-config/metrics.river
      - --server.http.listen-addr=0.0.0.0:12345
      - --cluster.enabled=true
      - --cluster.join-addresses=grafana-agent-cluster:12345
      - --disable-reporting=true
    environment:
      - AGENT_MODE=flow
      - AGENT_CONFIG_FOLDER=/etc/agent-config
    healthcheck:
      disable: true
    ports:
      - "12345"
    # scale up support
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - grafana-agent-cluster

  load-mimir-rules:
    depends_on:
      gateway:
        condition: service_started
    image: grafana/mimirtool:2.10.0
    volumes:
      - ../../../monitoring-mixins/mimir-mixin/deploy/rules.yaml:/mimir-mixin/rules.yaml
      - ../../../monitoring-mixins/mimir-mixin/deploy/alerts.yaml:/mimir-mixin/alerts.yaml
    environment:
      - MIMIR_ADDRESS=http://gateway:8080
      - MIMIR_TENANT_ID=anonymous
    command: >-
      rules load /mimir-mixin/rules.yaml /mimir-mixin/alerts.yaml
  gateway:
    depends_on:
      distributor:
        condition: service_healthy
      ruler:
        condition: service_healthy
    image: nginxinc/nginx-unprivileged:1.25-alpine
    volumes:
      - ../../common/config/nginx:/etc/nginx/templates
      - ../../common/config/mimir/gateway_mimir.conf.template:/etc/nginx/templates/gateway_mimir.conf.template
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
      - DISTRIBUTOR_HOST=distributor
      - ALERT_MANAGER_HOST=alertmanager
      - RULER_HOST=ruler
      - QUERY_FRONTEND_HOST=query-frontend
      - COMPACTOR_HOST=compactor
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8080"

  distributor:
    depends_on:
      ingester:
        condition: service_started
    image: &mimirImage grafana/mimir:2.10.3
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=distributor
#      - -log.level=warn
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - mimir-memberlist

  overrides-exporter:
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=overrides-exporter

  querier:
    depends_on:
      query-scheduler:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=querier
      - -log.level=error
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - mimir-memberlist

  query-frontend:
    depends_on:
      query-scheduler:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=query-frontend
      - -log.level=error

  query-scheduler:
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=query-scheduler
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 2

  ruler:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=ruler
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      default:
        aliases:
          - mimir-memberlist

  alertmanager:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=alertmanager
    networks:
      default:
        aliases:
          - mimir-memberlist

  compactor:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=compactor
    networks:
      default:
        aliases:
          - mimir-memberlist

  ingester:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=ingester
    ports:
      - "8080"
    deploy:
      replicas: 3
    networks:
      default:
        aliases:
          - mimir-memberlist

  store-gateway:
    depends_on:
      minio:
        condition: service_healthy
    image: *mimirImage
    volumes:
      - ../../common/config/mimir/microservices-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use microservices-mode-metrics.yaml
      - ./config/mimir:/etc/mimir
    command:
      - -config.file=/etc/mimir.yaml
      - -target=store-gateway
    networks:
      default:
        aliases:
          - mimir-memberlist

  grafana:
    image: grafana/grafana:10.2.0
    command:
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ../../common/config/grafana/grafana.ini:/etc/grafana-config/grafana.ini
      - ../../common/config/grafana/dashboards:/var/lib/grafana/dashboards
      - ../../common/config/grafana/provisioning:/etc/grafana/provisioning
      - ../../common/config/mimir/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml    # load datasources
      - ../../../monitoring-mixins/mimir-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/mimir-mixin # load dashboards
    environment:
      - GF_LOG_LEVEL=error
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin_password}
    ports:
      - "3000:3000"

volumes:
  data-minio:
    driver: local      
